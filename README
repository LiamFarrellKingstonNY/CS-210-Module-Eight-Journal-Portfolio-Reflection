Project: Airgead Banking Investment Calculator

Summary
This C++ program calculates the growth of an investment over time, both with and without additional monthly deposits. The user inputs the initial investment amount, monthly deposit, annual interest rate, and number of years. The program then generates a clear year-by-year report showing the balance and earned interest for both scenarios. It automates financial projections that would otherwise require complex manual calculations.

What I Did Well
I structured the program using object-oriented design (Investment class) and modular functions for clarity. I also implemented input validation to prevent invalid or negative entries and formatted the output tables for professional readability. The final results precisely match expected compound-interest values.

Areas for Improvement
If I enhanced this project, I would add:

File I/O features to load and save scenarios automatically.

Input sanitization for edge cases (e.g., very large values).

A graphical output or chart showing growth over time for better visualization.
These updates would improve efficiency, security, and user experience.

Challenges and How I Overcame Them
The most challenging part was getting the compound-interest loop logic correct for monthly versus yearly calculations. I overcame this by writing detailed pseudocode 

Pseudocode
testing with small data sets, and verifying results against an online compound-interest calculator. I also used debug output to confirm intermediate balances.
Resources that helped me include cplusplus.com, Stack Overflow, and SNHU’s ZyBooks examples.

Transferable Skills

Object-oriented programming (C++)

Algorithm design and pseudocode planning

Modular function development and debugging

Financial modeling logic (compound interest)

Using GitHub for version control and documentation

Maintaining Readability and Adaptability
I followed consistent naming conventions, clear indentation, and in-line documentation following the Google C++ Style Guide
. Each function performs one clear task, making the code easy to test, reuse, and maintain.
Future developers can easily adapt this calculator for other financial scenarios, such as mortgages or retirement planning.

Repository Contents

main.cpp — handles program flow and user input

Investment.cpp / Investment.h — class handling interest and balance logic

Pseudocode.txt — planning and algorithm documentation 

README.md — this reflection file
